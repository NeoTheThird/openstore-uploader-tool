#!/usr/bin/env python

import sys
import os
import shutil
import openUapp
from os.path import isfile

import urllib2, requests

uApp = openUapp.repo()
args = {"-m": ["--changelog", "-m"], "-l": ["--license", "-l"], "-s": ["--source", "-s"], "-d": ["--description", "-d"], "-c": ["--category", "-c"], "-t": ["--tagline", "-t"]}

def usage():
	print 'Usage:'
	print 'open-uapp update [Click package] [Args] | Edit an app'
	print 'open-uapp new [Click package] | Create a new app'
	print 'open-uapp delete [app ID] | Delete an App'
	print 'open-uapp list | List all Apps'
	print 'open-uapp info [app ID] Displays info about an App'
	print '\nArgs:'
	print "--changelog, -m\n--license, -l\n--source, -s\n--description, -d\n--category, -c\n--tagline, -t\n"
	print 'Examples:'
	print 'open-uapp update mycoolapp.click -l "GPL" -m "-bugfixes"'
	print 'open-uapp new mycoolapp.click'
	print 'open-uapp delete openstore.mzanetti'
	print 'open-uapp list'
	print 'open-uapp info openstore.mzanetti'


	sys.exit()

if len(sys.argv) <= 1:
	usage()

elif sys.argv[1] == "update":
	if len(sys.argv) > 2:
		force=False
		if not uApp.hasApi():
			print "You have not provided a API key"
			print "Use 'open-uapp config api [key]' to set the api key"
			sys.exit()
		if len(sys.argv) > 3:
			skip=False
			for index, arg in enumerate(sys.argv):
				if index <= 2:
					continue
				if skip:
					skip=False
					continue
				if arg in args["-l"]:
					uApp.update["license"] = sys.argv[index+1]
					skip=True
				elif arg in args["-t"]:
					uApp.update["tagline"] = sys.argv[index+1]
					skip=True
				elif arg in args["-s"]:
					uApp.update["source"] = sys.argv[index+1]
					skip=True
				elif arg in args["-d"]:
					uApp.update["description"] = sys.argv[index+1]
					skip=True
				elif arg in args["-c"]:
					uApp.update["category"] = sys.argv[index+1]
					skip=True
				elif arg in args["-m"]:
					uApp.update["changelog"] = sys.argv[index+1]
					skip=True
				elif arg == "--force":
					force=True
				else:
					print "The '" + arg + "' argument do not exsist"
					sys.exit()
		try:
			uApp.updateR(sys.argv[2], force)
			print "Successfully Updated " + uApp._id
		except ValueError as e: print e[0]
	else:
		usage()

elif sys.argv[1] == "delete":
	if len(sys.argv) > 2:
		if not uApp.hasApi():
			print "You have not provided a API key"
			print "Use 'open-uapp config api [key]' to set the api key"
			sys.exit()
		try:
			uApp.delete(sys.argv[2])
			print "Successfully Deleted " + sys.argv[2]
		except ValueError as e: print e[0]
	else:
		usage()
elif sys.argv[1] == "config":
	if not len(sys.argv) > 2:
		print "Configs"
		print "API: " + uApp.api
		print "repoUrl: " + uApp.repoUrl
	elif sys.argv[2] == "api":
		if len(sys.argv) <= 3:
			print "You need to provide an api key"
		else:
			uApp.api = sys.argv[3]
			uApp.saveConfig()
			print "API successfully saved"
	elif sys.argv[2] == "repoUrl":
		if len(sys.argv) <= 3:
			print "You need to provide an url"
		else:
			uApp.repoUrl = sys.argv[3]
			uApp.saveConfig()
			print "repoUrl successfully saved"
	else:
		print "Cannot find the config " + sys.argv[2]

elif sys.argv[1] == "new" or sys.argv[1] == "add":
	if not uApp.hasApi():
		print "You have not provided a API key"
		print "Use 'open-uapp config api [key]' to set the api key"
		sys.exit()
	if sys.argv > 2:
		if len(sys.argv) > 3:
			skip=False
			for index, arg in enumerate(sys.argv):
				if index <= 2:
					continue
				if skip:
					skip=False
					continue
				if arg in args["-l"]:
					uApp.update["license"] = sys.argv[index+1]
					skip=True
				elif arg in args["-t"]:
					uApp.update["tagline"] = sys.argv[index+1]
					skip=True
				elif arg in args["-s"]:
					uApp.update["source"] = sys.argv[index+1]
					skip=True
				elif arg in args["-d"]:
					uApp.update["description"] = sys.argv[index+1]
					skip=True
				elif arg in args["-c"]:
					uApp.update["category"] = sys.argv[index+1]
					skip=True
				elif arg in args["-m"]:
					uApp.update["changelog"] = sys.argv[index+1]
					skip=True
				else:
					print "The '" + arg + "' argument do not exsist"
					sys.exit()
		try:
			uApp.new(sys.argv[2])
			print "Successfully Added new package"
		except ValueError as e: print e[0]

elif sys.argv[1] == "list":
	uApp.fetch()
	for i in uApp.repo["data"]:
		print i["name"] + " | " + i["id"]

elif sys.argv[1] == "info":
	if len(sys.argv) > 2:
		uApp.fetch()
		notFound=True
		for i in uApp.repo["data"]:
			if sys.argv[2] == i["id"]:
				notFound=False
				if not i["name"] == "": print "Name: " + i["name"]
				if not i["description"] == "": print "Description: " + i["description"]
				if not i["tagline"] == "": print "Tagline: " + i["tagline"]
				if not i["license"] == "": print "License: " + i["license"]
				if not i["author"] == "": print "Author: " + i["author"]
				if not i["category"] == "": print "Category: " + i["category"]
		if (notFound): print "Cannot find app with a id: " + sys.argv[2]
	else:
		print "Missing appID argument"

else:
	usage()
